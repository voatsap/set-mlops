#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è YOLOv8n –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é Weights & Biases
–¢—Ä–µ–Ω—É—î –º–æ–¥–µ–ª—å YOLOv8n –Ω–∞ CPU –∑ –ø–æ–≤–Ω–∏–º –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º W&B —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –º–æ–¥–µ–ª—ñ
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≤–±—É–¥–æ–≤–∞–Ω—É —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é YOLO W&B
"""

import os
import yaml
import wandb
from pathlib import Path
from dotenv import load_dotenv
from ultralytics import YOLO
import torch

def load_config(config_path="config.yaml"):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ YAML —Ñ–∞–π–ª—É"""
    with open(config_path, 'r') as file:
        config = yaml.safe_load(file)
    return config

def setup_wandb_environment():
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ W&B —Ç–∞ –≤–º–∏–∫–∞—î —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é YOLO W&B"""
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    load_dotenv()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ API –∫–ª—é—á W&B –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    wandb_api_key = os.getenv('WANDB_API_KEY')
    if not wandb_api_key:
        print("Warning: WANDB_API_KEY not found in environment variables")
        print("Please set your W&B API key in .env file")
        return False
    
    # –í—Ö–æ–¥–∏–º–æ –≤ W&B
    try:
        wandb.login(key=wandb_api_key)
        print("‚úÖ Successfully logged in to W&B")
        
        # –í–º–∏–∫–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è W&B –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö YOLO
        from ultralytics.utils import SETTINGS
        SETTINGS['wandb'] = True
        print("‚úÖ W&B logging enabled in YOLO settings")
        
        return True
    except Exception as e:
        print(f"‚ùå Failed to setup W&B: {e}")
        return False

def train_model(config):
    """–¢—Ä–µ–Ω—É—î –º–æ–¥–µ–ª—å YOLOv8n –∑ –≤–±—É–¥–æ–≤–∞–Ω–∏–º –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º W&B"""
    
    # –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ run_name –∑–º—ñ–Ω–Ω–æ—é —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞, —è–∫—â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    run_name = os.getenv('WANDB_RUN_NAME', config['run_name'])
    
    print("üöÄ Starting YOLOv8n training on CPU...")
    print(f"üìä W&B Project: {config['wandb_project']}")
    print(f"üèÉ Run Name: {run_name}")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–æ–¥–µ–ª—å
    model = YOLO(config['model'])
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è - YOLO –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–æ–±–∏—Ç—å —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é W&B
    train_args = {
        'data': config['data'],
        'epochs': config['epochs'],
        'batch': config['batch'],
        'imgsz': config['imgsz'],
        'device': config['device'],
        'workers': config['workers'],
        'optimizer': config['optimizer'],
        'lr0': config['lr0'],
        'momentum': config['momentum'],
        'weight_decay': config['weight_decay'],
        'save': config['save'],
        'save_period': config['save_period'],
        'project': config['wandb_project'],  # –ù–∞–∑–≤–∞ –ø—Ä–æ—î–∫—Ç—É W&B
        'name': run_name,                    # –ù–∞–∑–≤–∞ –∑–∞–ø—É—Å–∫—É W&B (–¥–∏–Ω–∞–º—ñ—á–Ω–∞)
        'plots': True,
        'verbose': True
    }
    
    print(f"üîß Training parameters: {train_args}")
    
    # –ü–æ—á–∏–Ω–∞—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è - YOLO –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ª–æ–≥—É–≤–∞—Ç–∏–º–µ –≤ W&B
    results = model.train(**train_args)
    
    print("‚úÖ Training completed with built-in W&B logging!")
    
    return model, results

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"""
    print("=" * 60)
    print("ü§ñ YOLOv8n CPU Training with W&B Integration")
    print("=" * 60)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞ CPU
    device = "cuda" if torch.cuda.is_available() else "cpu"
    print(f"üñ•Ô∏è  Device: {device}")
    
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        config = load_config()
        
        # –ü—Ä–∏–º—É—Å–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CPU, —è–∫ –∑–∞–∑–Ω–∞—á–µ–Ω–æ –≤ –≤–∏–º–æ–≥–∞—Ö
        config['device'] = 'cpu'
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ W&B (–≤—Ö—ñ–¥ —Ç–∞ –≤–º–∏–∫–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó YOLO)
        if not setup_wandb_environment():
            print("‚ö†Ô∏è  Continuing without W&B logging")
        
        # –¢—Ä–µ–Ω—É—î–º–æ –º–æ–¥–µ–ª—å –∑ –≤–±—É–¥–æ–≤–∞–Ω–æ—é —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é W&B
        model, results = train_model(config)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–Ω—Ü–µ–≤—É –Ω–∞–∑–≤—É –∑–∞–ø—É—Å–∫—É (–º–æ–∂–µ –±—É—Ç–∏ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ–º)
        final_run_name = os.getenv('WANDB_RUN_NAME', config['run_name'])
        
        print("‚úÖ Training completed successfully!")
        print(f"üìÅ Results saved in: {config['wandb_project']}/{final_run_name}/")
        print(f"üåê Check your W&B dashboard at: https://wandb.ai")
        
    except Exception as e:
        print(f"‚ùå Error during training: {str(e)}")
        raise

if __name__ == "__main__":
    main() 